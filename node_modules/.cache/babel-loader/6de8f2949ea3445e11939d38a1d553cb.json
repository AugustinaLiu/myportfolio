{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"sources":["/Users/aoliu/Documents/Project/myportfolio/node_modules/@material-ui/core/esm/styles/cssUtils.js"],"names":["_defineProperty","alignProperty","_ref","size","grid","sizeBelow","sizeAbove","fontGrid","_ref2","lineHeight","pixels","htmlFontSize","responsiveProperty","_ref3","cssProperty","min","max","_ref3$unit","unit","_ref3$breakpoints","breakpoints","_ref3$transform","transform","output","concat","factor","length","forEach","breakpoint","value","Math","round"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIC,IAAI,GAAGD,IAAI,CAACC,IAAhB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAEA,MAAIC,SAAS,GAAGF,IAAI,GAAGA,IAAI,GAAGC,IAA9B;AACA,MAAIE,SAAS,GAAGD,SAAS,GAAGD,IAA5B;AACA,SAAOD,IAAI,GAAGE,SAAP,GAAmBC,SAAS,GAAGH,IAA/B,GAAsCE,SAAtC,GAAkDC,SAAzD;AACD,C,CAAC;AACF;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,MAAIC,UAAU,GAAGD,KAAK,CAACC,UAAvB;AAAA,MACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;AAAA,MAEIC,YAAY,GAAGH,KAAK,CAACG,YAFzB;AAGA,SAAOD,MAAM,IAAID,UAAU,GAAGE,YAAjB,CAAb;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,MAAIC,WAAW,GAAGD,KAAK,CAACC,WAAxB;AAAA,MACIC,GAAG,GAAGF,KAAK,CAACE,GADhB;AAAA,MAEIC,GAAG,GAAGH,KAAK,CAACG,GAFhB;AAAA,MAGIC,UAAU,GAAGJ,KAAK,CAACK,IAHvB;AAAA,MAIIA,IAAI,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,KAAxB,GAAgCA,UAJ3C;AAAA,MAKIE,iBAAiB,GAAGN,KAAK,CAACO,WAL9B;AAAA,MAMIA,WAAW,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,CAA/B,GAAkDA,iBANpE;AAAA,MAOIE,eAAe,GAAGR,KAAK,CAACS,SAP5B;AAAA,MAQIA,SAAS,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,IAA7B,GAAoCA,eARpD;;AAUA,MAAIE,MAAM,GAAGvB,eAAe,CAAC,EAAD,EAAKc,WAAL,EAAkB,GAAGU,MAAH,CAAUT,GAAV,EAAeS,MAAf,CAAsBN,IAAtB,CAAlB,CAA5B;;AAEA,MAAIO,MAAM,GAAG,CAACT,GAAG,GAAGD,GAAP,IAAcK,WAAW,CAACA,WAAW,CAACM,MAAZ,GAAqB,CAAtB,CAAtC;AACAN,EAAAA,WAAW,CAACO,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACxC,QAAIC,KAAK,GAAGd,GAAG,GAAGU,MAAM,GAAGG,UAA3B;;AAEA,QAAIN,SAAS,KAAK,IAAlB,EAAwB;AACtBO,MAAAA,KAAK,GAAGP,SAAS,CAACO,KAAD,CAAjB;AACD;;AAEDN,IAAAA,MAAM,CAAC,qBAAqBC,MAArB,CAA4BI,UAA5B,EAAwC,KAAxC,CAAD,CAAN,GAAyD5B,eAAe,CAAC,EAAD,EAAKc,WAAL,EAAkB,GAAGU,MAAH,CAAUM,IAAI,CAACC,KAAL,CAAWF,KAAK,GAAG,KAAnB,IAA4B,KAAtC,EAA6CL,MAA7C,CAAoDN,IAApD,CAAlB,CAAxE;AACD,GARD;AASA,SAAOK,MAAP;AACD","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n *\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 960, 1280] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}"]},"metadata":{},"sourceType":"module"}