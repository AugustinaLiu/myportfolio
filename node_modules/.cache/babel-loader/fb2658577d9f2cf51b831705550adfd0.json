{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/* eslint-disable jsx-a11y/aria-role */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = {\n  root: {\n    width: 40,\n    flexShrink: 0\n  },\n  vertical: {\n    width: '100%',\n    height: 40,\n    '& svg': {\n      transform: 'rotate(90deg)'\n    }\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowLeft, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(KeyboardArrowRight, {\n  fontSize: \"small\"\n});\n\nvar TabScrollButton = React.forwardRef(function TabScrollButton(props, ref) {\n  var classes = props.classes,\n      classNameProp = props.className,\n      direction = props.direction,\n      orientation = props.orientation,\n      visible = props.visible,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"direction\", \"orientation\", \"visible\"]);\n\n  var className = clsx(classes.root, classNameProp, orientation === 'vertical' && classes.vertical);\n\n  if (!visible) {\n    return React.createElement(\"div\", {\n      className: className\n    });\n  }\n\n  return React.createElement(ButtonBase, _extends({\n    component: \"div\",\n    className: className,\n    ref: ref,\n    role: null,\n    tabIndex: null\n  }, other), direction === 'left' ? _ref : _ref2);\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Which direction should the button indicate?\n   */\n  direction: PropTypes.oneOf(['left', 'right']).isRequired,\n\n  /**\n   * The tabs orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n\n  /**\n   * Should the button be present or just consume space.\n   */\n  visible: PropTypes.bool.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'PrivateTabScrollButton'\n})(TabScrollButton);","map":{"version":3,"sources":["/Users/aoliu/Documents/Project/myportfolio/node_modules/@material-ui/core/esm/Tabs/TabScrollButton.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","KeyboardArrowLeft","KeyboardArrowRight","withStyles","ButtonBase","styles","root","width","flexShrink","vertical","height","transform","_ref","createElement","fontSize","_ref2","TabScrollButton","forwardRef","props","ref","classes","classNameProp","className","direction","orientation","visible","other","component","role","tabIndex","process","env","NODE_ENV","propTypes","object","isRequired","string","oneOf","bool","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,wBAAP,MAAqC,oDAArC;AAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAO,IAAIC,MAAM,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,EADH;AAEJC,IAAAA,UAAU,EAAE;AAFR,GADY;AAKlBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,KAAK,EAAE,MADC;AAERG,IAAAA,MAAM,EAAE,EAFA;AAGR,aAAS;AACPC,MAAAA,SAAS,EAAE;AADJ;AAHD;AALQ,CAAb;AAaP;;;;AAIA,IAAIC,IAAI,GAAGd,KAAK,CAACe,aAAN,CAAoBZ,iBAApB,EAAuC;AAChDa,EAAAA,QAAQ,EAAE;AADsC,CAAvC,CAAX;;AAIA,IAAIC,KAAK,GAAGjB,KAAK,CAACe,aAAN,CAAoBX,kBAApB,EAAwC;AAClDY,EAAAA,QAAQ,EAAE;AADwC,CAAxC,CAAZ;;AAIA,IAAIE,eAAe,GAAGlB,KAAK,CAACmB,UAAN,CAAiB,SAASD,eAAT,CAAyBE,KAAzB,EAAgCC,GAAhC,EAAqC;AAC1E,MAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;AAAA,MACIC,aAAa,GAAGH,KAAK,CAACI,SAD1B;AAAA,MAEIC,SAAS,GAAGL,KAAK,CAACK,SAFtB;AAAA,MAGIC,WAAW,GAAGN,KAAK,CAACM,WAHxB;AAAA,MAIIC,OAAO,GAAGP,KAAK,CAACO,OAJpB;AAAA,MAKIC,KAAK,GAAG7B,wBAAwB,CAACqB,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB,EAAsC,aAAtC,EAAqD,SAArD,CAAR,CALpC;;AAOA,MAAII,SAAS,GAAGtB,IAAI,CAACoB,OAAO,CAACd,IAAT,EAAee,aAAf,EAA8BG,WAAW,KAAK,UAAhB,IAA8BJ,OAAO,CAACX,QAApE,CAApB;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,WAAO3B,KAAK,CAACe,aAAN,CAAoB,KAApB,EAA2B;AAChCS,MAAAA,SAAS,EAAEA;AADqB,KAA3B,CAAP;AAGD;;AAED,SAAOxB,KAAK,CAACe,aAAN,CAAoBT,UAApB,EAAgCR,QAAQ,CAAC;AAC9C+B,IAAAA,SAAS,EAAE,KADmC;AAE9CL,IAAAA,SAAS,EAAEA,SAFmC;AAG9CH,IAAAA,GAAG,EAAEA,GAHyC;AAI9CS,IAAAA,IAAI,EAAE,IAJwC;AAK9CC,IAAAA,QAAQ,EAAE;AALoC,GAAD,EAM5CH,KAN4C,CAAxC,EAMIH,SAAS,KAAK,MAAd,GAAuBX,IAAvB,GAA8BG,KANlC,CAAP;AAOD,CAvBqB,CAAtB;AAwBAe,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,eAAe,CAACiB,SAAhB,GAA4B;AAClE;;;;AAIAb,EAAAA,OAAO,EAAErB,SAAS,CAACmC,MAAV,CAAiBC,UALwC;;AAOlE;;;AAGAb,EAAAA,SAAS,EAAEvB,SAAS,CAACqC,MAV6C;;AAYlE;;;AAGAb,EAAAA,SAAS,EAAExB,SAAS,CAACsC,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,EAAmCF,UAfoB;;AAiBlE;;;AAGAX,EAAAA,WAAW,EAAEzB,SAAS,CAACsC,KAAV,CAAgB,CAAC,YAAD,EAAe,UAAf,CAAhB,EAA4CF,UApBS;;AAsBlE;;;AAGAV,EAAAA,OAAO,EAAE1B,SAAS,CAACuC,IAAV,CAAeH;AAzB0C,CAApE,GA0BI,KAAK,CA1BT;AA2BA,eAAehC,UAAU,CAACE,MAAD,EAAS;AAChCkC,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZvB,eAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/* eslint-disable jsx-a11y/aria-role */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = {\n  root: {\n    width: 40,\n    flexShrink: 0\n  },\n  vertical: {\n    width: '100%',\n    height: 40,\n    '& svg': {\n      transform: 'rotate(90deg)'\n    }\n  }\n};\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(KeyboardArrowLeft, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(KeyboardArrowRight, {\n  fontSize: \"small\"\n});\n\nvar TabScrollButton = React.forwardRef(function TabScrollButton(props, ref) {\n  var classes = props.classes,\n      classNameProp = props.className,\n      direction = props.direction,\n      orientation = props.orientation,\n      visible = props.visible,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"direction\", \"orientation\", \"visible\"]);\n\n  var className = clsx(classes.root, classNameProp, orientation === 'vertical' && classes.vertical);\n\n  if (!visible) {\n    return React.createElement(\"div\", {\n      className: className\n    });\n  }\n\n  return React.createElement(ButtonBase, _extends({\n    component: \"div\",\n    className: className,\n    ref: ref,\n    role: null,\n    tabIndex: null\n  }, other), direction === 'left' ? _ref : _ref2);\n});\nprocess.env.NODE_ENV !== \"production\" ? TabScrollButton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Which direction should the button indicate?\n   */\n  direction: PropTypes.oneOf(['left', 'right']).isRequired,\n\n  /**\n   * The tabs orientation (layout flow direction).\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']).isRequired,\n\n  /**\n   * Should the button be present or just consume space.\n   */\n  visible: PropTypes.bool.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'PrivateTabScrollButton'\n})(TabScrollButton);"]},"metadata":{},"sourceType":"module"}