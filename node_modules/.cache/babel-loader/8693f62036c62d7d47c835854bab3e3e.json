{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport convertLength from 'convert-css-length';\nimport { responsiveProperty, alignProperty, fontGrid } from './cssUtils';\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error([\"Material-UI: unsupported non-unitless line height with grid alignment.\", 'Use unitless line heights instead.'].join('\\n'));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, {}, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}","map":{"version":3,"sources":["/Users/aoliu/Documents/Project/myportfolio/node_modules/@material-ui/core/esm/styles/responsiveFontSizes.js"],"names":["_extends","convertLength","responsiveProperty","alignProperty","fontGrid","isUnitless","value","String","parseFloat","length","responsiveFontSizes","themeInput","options","arguments","undefined","_options$breakpoints","breakpoints","_options$disableAlign","disableAlign","_options$factor","factor","_options$variants","variants","theme","typography","convert","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","fontSize","maxFontSize","minFontSize","lineHeight","Error","join","transform","size","grid","pixels","cssProperty","min","max","unit"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,kBAAT,EAA6BC,aAA7B,EAA4CC,QAA5C,QAA4D,YAA5D;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,SAAOC,MAAM,CAACC,UAAU,CAACF,KAAD,CAAX,CAAN,CAA0BG,MAA1B,KAAqCF,MAAM,CAACD,KAAD,CAAN,CAAcG,MAA1D;AACD;;AAED,eAAe,SAASC,mBAAT,CAA6BC,UAA7B,EAAyC;AACtD,MAAIC,OAAO,GAAGC,SAAS,CAACJ,MAAV,GAAmB,CAAnB,IAAwBI,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,MAAIE,oBAAoB,GAAGH,OAAO,CAACI,WAAnC;AAAA,MACIA,WAAW,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAlC,GAAuDA,oBADzE;AAAA,MAEIE,qBAAqB,GAAGL,OAAO,CAACM,YAFpC;AAAA,MAGIA,YAAY,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAH9D;AAAA,MAIIE,eAAe,GAAGP,OAAO,CAACQ,MAJ9B;AAAA,MAKIA,MAAM,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,CAA7B,GAAiCA,eAL9C;AAAA,MAMIE,iBAAiB,GAAGT,OAAO,CAACU,QANhC;AAAA,MAOIA,QAAQ,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,WAArC,EAAkD,WAAlD,EAA+D,OAA/D,EAAwE,OAAxE,EAAiF,SAAjF,EAA4F,QAA5F,EAAsG,UAAtG,CAA/B,GAAmJA,iBAPlK;;AASA,MAAIE,KAAK,GAAGvB,QAAQ,CAAC,EAAD,EAAKW,UAAL,CAApB;;AAEAY,EAAAA,KAAK,CAACC,UAAN,GAAmBxB,QAAQ,CAAC,EAAD,EAAKuB,KAAK,CAACC,UAAX,CAA3B;AACA,MAAIA,UAAU,GAAGD,KAAK,CAACC,UAAvB,CAdsD,CAcnB;AACnC;;AAEA,MAAIC,OAAO,GAAGxB,aAAa,CAACuB,UAAU,CAACE,YAAZ,CAA3B;AACA,MAAIC,gBAAgB,GAAGX,WAAW,CAACY,GAAZ,CAAgB,UAAUC,CAAV,EAAa;AAClD,WAAON,KAAK,CAACP,WAAN,CAAkBc,MAAlB,CAAyBD,CAAzB,CAAP;AACD,GAFsB,CAAvB;AAGAP,EAAAA,QAAQ,CAACS,OAAT,CAAiB,UAAUC,OAAV,EAAmB;AAClC,QAAIC,KAAK,GAAGT,UAAU,CAACQ,OAAD,CAAtB;AACA,QAAIE,WAAW,GAAG1B,UAAU,CAACiB,OAAO,CAACQ,KAAK,CAACE,QAAP,EAAiB,KAAjB,CAAR,CAA5B;;AAEA,QAAID,WAAW,IAAI,CAAnB,EAAsB;AACpB;AACD;;AAED,QAAIE,WAAW,GAAGF,WAAlB;AACA,QAAIG,WAAW,GAAG,IAAI,CAACD,WAAW,GAAG,CAAf,IAAoBhB,MAA1C;AACA,QAAIkB,UAAU,GAAGL,KAAK,CAACK,UAAvB;;AAEA,QAAI,CAACjC,UAAU,CAACiC,UAAD,CAAX,IAA2B,CAACpB,YAAhC,EAA8C;AAC5C,YAAM,IAAIqB,KAAJ,CAAU,CAAC,wEAAD,EAA2E,oCAA3E,EAAiHC,IAAjH,CAAsH,IAAtH,CAAV,CAAN;AACD;;AAED,QAAI,CAACnC,UAAU,CAACiC,UAAD,CAAf,EAA6B;AAC3B;AACAA,MAAAA,UAAU,GAAG9B,UAAU,CAACiB,OAAO,CAACa,UAAD,EAAa,KAAb,CAAR,CAAV,GAAyC9B,UAAU,CAAC0B,WAAD,CAAhE;AACD;;AAED,QAAIO,SAAS,GAAG,IAAhB;;AAEA,QAAI,CAACvB,YAAL,EAAmB;AACjBuB,MAAAA,SAAS,GAAG,SAASA,SAAT,CAAmBnC,KAAnB,EAA0B;AACpC,eAAOH,aAAa,CAAC;AACnBuC,UAAAA,IAAI,EAAEpC,KADa;AAEnBqC,UAAAA,IAAI,EAAEvC,QAAQ,CAAC;AACbwC,YAAAA,MAAM,EAAE,CADK;AAEbN,YAAAA,UAAU,EAAEA,UAFC;AAGbZ,YAAAA,YAAY,EAAEF,UAAU,CAACE;AAHZ,WAAD;AAFK,SAAD,CAApB;AAQD,OATD;AAUD;;AAEDF,IAAAA,UAAU,CAACQ,OAAD,CAAV,GAAsBhC,QAAQ,CAAC,EAAD,EAAKiC,KAAL,EAAY,EAAZ,EAAgB/B,kBAAkB,CAAC;AAC/D2C,MAAAA,WAAW,EAAE,UADkD;AAE/DC,MAAAA,GAAG,EAAET,WAF0D;AAG/DU,MAAAA,GAAG,EAAEX,WAH0D;AAI/DY,MAAAA,IAAI,EAAE,KAJyD;AAK/DhC,MAAAA,WAAW,EAAEW,gBALkD;AAM/Dc,MAAAA,SAAS,EAAEA;AANoD,KAAD,CAAlC,CAA9B;AAQD,GA5CD;AA6CA,SAAOlB,KAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport convertLength from 'convert-css-length';\nimport { responsiveProperty, alignProperty, fontGrid } from './cssUtils';\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\nexport default function responsiveFontSizes(themeInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$breakpoints = options.breakpoints,\n      breakpoints = _options$breakpoints === void 0 ? ['sm', 'md', 'lg'] : _options$breakpoints,\n      _options$disableAlign = options.disableAlign,\n      disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign,\n      _options$factor = options.factor,\n      factor = _options$factor === void 0 ? 2 : _options$factor,\n      _options$variants = options.variants,\n      variants = _options$variants === void 0 ? ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline'] : _options$variants;\n\n  var theme = _extends({}, themeInput);\n\n  theme.typography = _extends({}, theme.typography);\n  var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  var convert = convertLength(typography.htmlFontSize);\n  var breakpointValues = breakpoints.map(function (x) {\n    return theme.breakpoints.values[x];\n  });\n  variants.forEach(function (variant) {\n    var style = typography[variant];\n    var remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    var maxFontSize = remFontSize;\n    var minFontSize = 1 + (maxFontSize - 1) / factor;\n    var lineHeight = style.lineHeight;\n\n    if (!isUnitless(lineHeight) && !disableAlign) {\n      throw new Error([\"Material-UI: unsupported non-unitless line height with grid alignment.\", 'Use unitless line heights instead.'].join('\\n'));\n    }\n\n    if (!isUnitless(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    var transform = null;\n\n    if (!disableAlign) {\n      transform = function transform(value) {\n        return alignProperty({\n          size: value,\n          grid: fontGrid({\n            pixels: 4,\n            lineHeight: lineHeight,\n            htmlFontSize: typography.htmlFontSize\n          })\n        });\n      };\n    }\n\n    typography[variant] = _extends({}, style, {}, responsiveProperty({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform: transform\n    }));\n  });\n  return theme;\n}"]},"metadata":{},"sourceType":"module"}